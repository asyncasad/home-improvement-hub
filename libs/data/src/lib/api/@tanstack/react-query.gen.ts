// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type {
  GetAgentData,
  PutAgentsByIdData,
  PutAgentsByIdError,
  PutAgentsByIdResponse,
  DeleteAgentsByIdData,
  DeleteAgentsByIdError,
  DeleteAgentsByIdResponse,
  PostAgentsData,
  PostAgentsError,
  PostAgentsResponse,
  GetCustomerData,
  PutCustomersByIdData,
  PutCustomersByIdError,
  PutCustomersByIdResponse,
  DeleteCustomersByIdData,
  DeleteCustomersByIdError,
  DeleteCustomersByIdResponse,
  PostCustomersData,
  PostCustomersError,
  PostCustomersResponse,
  GetJobData,
  PutJobsByIdData,
  PutJobsByIdError,
  PutJobsByIdResponse,
  DeleteJobsByIdData,
  DeleteJobsByIdError,
  DeleteJobsByIdResponse,
  PostJobsData,
  PostJobsError,
  PostJobsResponse,
  GetMetricRunFrequencyData,
  PostMetricRunFrequenciesData,
  PostMetricRunFrequenciesError,
  PostMetricRunFrequenciesResponse,
  PutMetricRunFrequenciesData,
  PutMetricRunFrequenciesError,
  PutMetricRunFrequenciesResponse,
  DeleteMetricRunFrequenciesData,
  DeleteMetricRunFrequenciesError,
  DeleteMetricRunFrequenciesResponse,
  GetMetricRunFrequenciesByNameData,
  GetMetricThresholdDirectionTypeData,
  PostMetricThresholdDirectionTypesData,
  PostMetricThresholdDirectionTypesError,
  PostMetricThresholdDirectionTypesResponse,
  PutMetricThresholdDirectionTypesData,
  PutMetricThresholdDirectionTypesError,
  PutMetricThresholdDirectionTypesResponse,
  DeleteMetricThresholdDirectionTypesData,
  DeleteMetricThresholdDirectionTypesError,
  DeleteMetricThresholdDirectionTypesResponse,
  GetMetricThresholdDirectionTypesByNameData,
  GetMetricTypeData,
  PostMetricTypesData,
  PostMetricTypesError,
  PostMetricTypesResponse,
  PutMetricTypesData,
  PutMetricTypesError,
  PutMetricTypesResponse,
  DeleteMetricTypesData,
  DeleteMetricTypesError,
  DeleteMetricTypesResponse,
  GetMetricTypesByNameData,
  GetMetricData,
  PostMetricsData,
  PostMetricsError,
  PostMetricsResponse,
  PutMetricsData,
  PutMetricsError,
  PutMetricsResponse,
  DeleteMetricsData,
  DeleteMetricsError,
  DeleteMetricsResponse,
  GetMetricsByMetricNameData,
  GetReviewData,
  PutReviewsByIdData,
  PutReviewsByIdError,
  PutReviewsByIdResponse,
  DeleteReviewsByIdData,
  DeleteReviewsByIdError,
  DeleteReviewsByIdResponse,
  PostReviewsData,
  PostReviewsError,
  PostReviewsResponse,
  GetServiceAlignmentTypeData,
  PostServiceAlignmentTypesData,
  PostServiceAlignmentTypesError,
  PostServiceAlignmentTypesResponse,
  PutServiceAlignmentTypesData,
  PutServiceAlignmentTypesError,
  PutServiceAlignmentTypesResponse,
  DeleteServiceAlignmentTypesData,
  DeleteServiceAlignmentTypesError,
  DeleteServiceAlignmentTypesResponse,
  GetServiceAlignmentTypesByNameData,
  GetServiceData,
  PutServicesByIdData,
  PutServicesByIdError,
  PutServicesByIdResponse,
  DeleteServicesByIdData,
  DeleteServicesByIdError,
  DeleteServicesByIdResponse,
  PostServicesData,
  PostServicesError,
  PostServicesResponse,
  GetUserData,
  PutUsersByIdData,
  PutUsersByIdError,
  PutUsersByIdResponse,
  DeleteUsersByIdData,
  DeleteUsersByIdError,
  DeleteUsersByIdResponse,
  PostUsersData,
  PostUsersError,
  PostUsersResponse,
} from '../types.gen';
import {
  client,
  getAgent,
  putAgentsById,
  deleteAgentsById,
  getAgents,
  postAgents,
  getCustomer,
  putCustomersById,
  deleteCustomersById,
  getCustomers,
  postCustomers,
  getJob,
  putJobsById,
  deleteJobsById,
  getJobs,
  postJobs,
  getMetricRunFrequency,
  getMetricRunFrequencies,
  postMetricRunFrequencies,
  putMetricRunFrequencies,
  deleteMetricRunFrequencies,
  getMetricRunFrequenciesByName,
  getMetricThresholdDirectionType,
  getMetricThresholdDirectionTypes,
  postMetricThresholdDirectionTypes,
  putMetricThresholdDirectionTypes,
  deleteMetricThresholdDirectionTypes,
  getMetricThresholdDirectionTypesByName,
  getMetricType,
  getMetricTypes,
  postMetricTypes,
  putMetricTypes,
  deleteMetricTypes,
  getMetricTypesByName,
  getMetric,
  getMetrics,
  postMetrics,
  putMetrics,
  deleteMetrics,
  getMetricsByMetricName,
  getReview,
  putReviewsById,
  deleteReviewsById,
  getReviews,
  postReviews,
  getServiceAlignmentType,
  getServiceAlignmentTypes,
  postServiceAlignmentTypes,
  putServiceAlignmentTypes,
  deleteServiceAlignmentTypes,
  getServiceAlignmentTypesByName,
  getService,
  putServicesById,
  deleteServicesById,
  getServices,
  postServices,
  getUser,
  putUsersById,
  deleteUsersById,
  getUsers,
  postUsers,
} from '../services.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  }
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? client).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const getAgentQueryKey = (options: Options<GetAgentData>) => [
  createQueryKey('getAgent', options),
];

export const getAgentOptions = (options: Options<GetAgentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAgent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAgentQueryKey(options),
  });
};

export const putAgentsByIdMutation = (
  options?: Partial<Options<PutAgentsByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    PutAgentsByIdResponse,
    AxiosError<PutAgentsByIdError>,
    Options<PutAgentsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putAgentsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteAgentsByIdMutation = (
  options?: Partial<Options<DeleteAgentsByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteAgentsByIdResponse,
    AxiosError<DeleteAgentsByIdError>,
    Options<DeleteAgentsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteAgentsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAgentsQueryKey = (options?: Options) => [
  createQueryKey('getAgents', options),
];

export const getAgentsOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAgents({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAgentsQueryKey(options),
  });
};

export const postAgentsQueryKey = (options: Options<PostAgentsData>) => [
  createQueryKey('postAgents', options),
];

export const postAgentsOptions = (options: Options<PostAgentsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAgents({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAgentsQueryKey(options),
  });
};

export const postAgentsMutation = (
  options?: Partial<Options<PostAgentsData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostAgentsResponse,
    AxiosError<PostAgentsError>,
    Options<PostAgentsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAgents({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getCustomerQueryKey = (options: Options<GetCustomerData>) => [
  createQueryKey('getCustomer', options),
];

export const getCustomerOptions = (options: Options<GetCustomerData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCustomer({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCustomerQueryKey(options),
  });
};

export const putCustomersByIdMutation = (
  options?: Partial<Options<PutCustomersByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    PutCustomersByIdResponse,
    AxiosError<PutCustomersByIdError>,
    Options<PutCustomersByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putCustomersById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteCustomersByIdMutation = (
  options?: Partial<Options<DeleteCustomersByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteCustomersByIdResponse,
    AxiosError<DeleteCustomersByIdError>,
    Options<DeleteCustomersByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteCustomersById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getCustomersQueryKey = (options?: Options) => [
  createQueryKey('getCustomers', options),
];

export const getCustomersOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCustomers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCustomersQueryKey(options),
  });
};

export const postCustomersQueryKey = (options: Options<PostCustomersData>) => [
  createQueryKey('postCustomers', options),
];

export const postCustomersOptions = (options: Options<PostCustomersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postCustomers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postCustomersQueryKey(options),
  });
};

export const postCustomersMutation = (
  options?: Partial<Options<PostCustomersData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostCustomersResponse,
    AxiosError<PostCustomersError>,
    Options<PostCustomersData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postCustomers({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getJobQueryKey = (options: Options<GetJobData>) => [
  createQueryKey('getJob', options),
];

export const getJobOptions = (options: Options<GetJobData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getJob({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getJobQueryKey(options),
  });
};

export const putJobsByIdMutation = (
  options?: Partial<Options<PutJobsByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    PutJobsByIdResponse,
    AxiosError<PutJobsByIdError>,
    Options<PutJobsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putJobsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteJobsByIdMutation = (
  options?: Partial<Options<DeleteJobsByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteJobsByIdResponse,
    AxiosError<DeleteJobsByIdError>,
    Options<DeleteJobsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteJobsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getJobsQueryKey = (options?: Options) => [
  createQueryKey('getJobs', options),
];

export const getJobsOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getJobs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getJobsQueryKey(options),
  });
};

export const postJobsQueryKey = (options: Options<PostJobsData>) => [
  createQueryKey('postJobs', options),
];

export const postJobsOptions = (options: Options<PostJobsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postJobs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postJobsQueryKey(options),
  });
};

export const postJobsMutation = (options?: Partial<Options<PostJobsData>>) => {
  const mutationOptions: UseMutationOptions<
    PostJobsResponse,
    AxiosError<PostJobsError>,
    Options<PostJobsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postJobs({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getMetricRunFrequencyQueryKey = (
  options: Options<GetMetricRunFrequencyData>
) => [createQueryKey('getMetricRunFrequency', options)];

export const getMetricRunFrequencyOptions = (
  options: Options<GetMetricRunFrequencyData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMetricRunFrequency({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMetricRunFrequencyQueryKey(options),
  });
};

export const getMetricRunFrequenciesQueryKey = (options?: Options) => [
  createQueryKey('getMetricRunFrequencies', options),
];

export const getMetricRunFrequenciesOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMetricRunFrequencies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMetricRunFrequenciesQueryKey(options),
  });
};

export const postMetricRunFrequenciesQueryKey = (
  options: Options<PostMetricRunFrequenciesData>
) => [createQueryKey('postMetricRunFrequencies', options)];

export const postMetricRunFrequenciesOptions = (
  options: Options<PostMetricRunFrequenciesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postMetricRunFrequencies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postMetricRunFrequenciesQueryKey(options),
  });
};

export const postMetricRunFrequenciesMutation = (
  options?: Partial<Options<PostMetricRunFrequenciesData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostMetricRunFrequenciesResponse,
    AxiosError<PostMetricRunFrequenciesError>,
    Options<PostMetricRunFrequenciesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postMetricRunFrequencies({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putMetricRunFrequenciesMutation = (
  options?: Partial<Options<PutMetricRunFrequenciesData>>
) => {
  const mutationOptions: UseMutationOptions<
    PutMetricRunFrequenciesResponse,
    AxiosError<PutMetricRunFrequenciesError>,
    Options<PutMetricRunFrequenciesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putMetricRunFrequencies({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteMetricRunFrequenciesMutation = (
  options?: Partial<Options<DeleteMetricRunFrequenciesData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteMetricRunFrequenciesResponse,
    AxiosError<DeleteMetricRunFrequenciesError>,
    Options<DeleteMetricRunFrequenciesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteMetricRunFrequencies({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getMetricRunFrequenciesByNameQueryKey = (
  options: Options<GetMetricRunFrequenciesByNameData>
) => [createQueryKey('getMetricRunFrequenciesByName', options)];

export const getMetricRunFrequenciesByNameOptions = (
  options: Options<GetMetricRunFrequenciesByNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMetricRunFrequenciesByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMetricRunFrequenciesByNameQueryKey(options),
  });
};

export const getMetricThresholdDirectionTypeQueryKey = (
  options: Options<GetMetricThresholdDirectionTypeData>
) => [createQueryKey('getMetricThresholdDirectionType', options)];

export const getMetricThresholdDirectionTypeOptions = (
  options: Options<GetMetricThresholdDirectionTypeData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMetricThresholdDirectionType({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMetricThresholdDirectionTypeQueryKey(options),
  });
};

export const getMetricThresholdDirectionTypesQueryKey = (options?: Options) => [
  createQueryKey('getMetricThresholdDirectionTypes', options),
];

export const getMetricThresholdDirectionTypesOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMetricThresholdDirectionTypes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMetricThresholdDirectionTypesQueryKey(options),
  });
};

export const postMetricThresholdDirectionTypesQueryKey = (
  options: Options<PostMetricThresholdDirectionTypesData>
) => [createQueryKey('postMetricThresholdDirectionTypes', options)];

export const postMetricThresholdDirectionTypesOptions = (
  options: Options<PostMetricThresholdDirectionTypesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postMetricThresholdDirectionTypes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postMetricThresholdDirectionTypesQueryKey(options),
  });
};

export const postMetricThresholdDirectionTypesMutation = (
  options?: Partial<Options<PostMetricThresholdDirectionTypesData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostMetricThresholdDirectionTypesResponse,
    AxiosError<PostMetricThresholdDirectionTypesError>,
    Options<PostMetricThresholdDirectionTypesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postMetricThresholdDirectionTypes({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putMetricThresholdDirectionTypesMutation = (
  options?: Partial<Options<PutMetricThresholdDirectionTypesData>>
) => {
  const mutationOptions: UseMutationOptions<
    PutMetricThresholdDirectionTypesResponse,
    AxiosError<PutMetricThresholdDirectionTypesError>,
    Options<PutMetricThresholdDirectionTypesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putMetricThresholdDirectionTypes({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteMetricThresholdDirectionTypesMutation = (
  options?: Partial<Options<DeleteMetricThresholdDirectionTypesData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteMetricThresholdDirectionTypesResponse,
    AxiosError<DeleteMetricThresholdDirectionTypesError>,
    Options<DeleteMetricThresholdDirectionTypesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteMetricThresholdDirectionTypes({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getMetricThresholdDirectionTypesByNameQueryKey = (
  options: Options<GetMetricThresholdDirectionTypesByNameData>
) => [createQueryKey('getMetricThresholdDirectionTypesByName', options)];

export const getMetricThresholdDirectionTypesByNameOptions = (
  options: Options<GetMetricThresholdDirectionTypesByNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMetricThresholdDirectionTypesByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMetricThresholdDirectionTypesByNameQueryKey(options),
  });
};

export const getMetricTypeQueryKey = (options: Options<GetMetricTypeData>) => [
  createQueryKey('getMetricType', options),
];

export const getMetricTypeOptions = (options: Options<GetMetricTypeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMetricType({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMetricTypeQueryKey(options),
  });
};

export const getMetricTypesQueryKey = (options?: Options) => [
  createQueryKey('getMetricTypes', options),
];

export const getMetricTypesOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMetricTypes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMetricTypesQueryKey(options),
  });
};

export const postMetricTypesQueryKey = (
  options: Options<PostMetricTypesData>
) => [createQueryKey('postMetricTypes', options)];

export const postMetricTypesOptions = (
  options: Options<PostMetricTypesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postMetricTypes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postMetricTypesQueryKey(options),
  });
};

export const postMetricTypesMutation = (
  options?: Partial<Options<PostMetricTypesData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostMetricTypesResponse,
    AxiosError<PostMetricTypesError>,
    Options<PostMetricTypesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postMetricTypes({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putMetricTypesMutation = (
  options?: Partial<Options<PutMetricTypesData>>
) => {
  const mutationOptions: UseMutationOptions<
    PutMetricTypesResponse,
    AxiosError<PutMetricTypesError>,
    Options<PutMetricTypesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putMetricTypes({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteMetricTypesMutation = (
  options?: Partial<Options<DeleteMetricTypesData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteMetricTypesResponse,
    AxiosError<DeleteMetricTypesError>,
    Options<DeleteMetricTypesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteMetricTypes({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getMetricTypesByNameQueryKey = (
  options: Options<GetMetricTypesByNameData>
) => [createQueryKey('getMetricTypesByName', options)];

export const getMetricTypesByNameOptions = (
  options: Options<GetMetricTypesByNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMetricTypesByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMetricTypesByNameQueryKey(options),
  });
};

export const getMetricQueryKey = (options: Options<GetMetricData>) => [
  createQueryKey('getMetric', options),
];

export const getMetricOptions = (options: Options<GetMetricData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMetric({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMetricQueryKey(options),
  });
};

export const getMetricsQueryKey = (options?: Options) => [
  createQueryKey('getMetrics', options),
];

export const getMetricsOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMetrics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMetricsQueryKey(options),
  });
};

export const postMetricsQueryKey = (options: Options<PostMetricsData>) => [
  createQueryKey('postMetrics', options),
];

export const postMetricsOptions = (options: Options<PostMetricsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postMetrics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postMetricsQueryKey(options),
  });
};

export const postMetricsMutation = (
  options?: Partial<Options<PostMetricsData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostMetricsResponse,
    AxiosError<PostMetricsError>,
    Options<PostMetricsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postMetrics({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putMetricsMutation = (
  options?: Partial<Options<PutMetricsData>>
) => {
  const mutationOptions: UseMutationOptions<
    PutMetricsResponse,
    AxiosError<PutMetricsError>,
    Options<PutMetricsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putMetrics({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteMetricsMutation = (
  options?: Partial<Options<DeleteMetricsData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteMetricsResponse,
    AxiosError<DeleteMetricsError>,
    Options<DeleteMetricsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteMetrics({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getMetricsByMetricNameQueryKey = (
  options: Options<GetMetricsByMetricNameData>
) => [createQueryKey('getMetricsByMetricName', options)];

export const getMetricsByMetricNameOptions = (
  options: Options<GetMetricsByMetricNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMetricsByMetricName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMetricsByMetricNameQueryKey(options),
  });
};

export const getReviewQueryKey = (options: Options<GetReviewData>) => [
  createQueryKey('getReview', options),
];

export const getReviewOptions = (options: Options<GetReviewData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getReview({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getReviewQueryKey(options),
  });
};

export const putReviewsByIdMutation = (
  options?: Partial<Options<PutReviewsByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    PutReviewsByIdResponse,
    AxiosError<PutReviewsByIdError>,
    Options<PutReviewsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putReviewsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteReviewsByIdMutation = (
  options?: Partial<Options<DeleteReviewsByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteReviewsByIdResponse,
    AxiosError<DeleteReviewsByIdError>,
    Options<DeleteReviewsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteReviewsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getReviewsQueryKey = (options?: Options) => [
  createQueryKey('getReviews', options),
];

export const getReviewsOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getReviews({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getReviewsQueryKey(options),
  });
};

export const postReviewsQueryKey = (options: Options<PostReviewsData>) => [
  createQueryKey('postReviews', options),
];

export const postReviewsOptions = (options: Options<PostReviewsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postReviews({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postReviewsQueryKey(options),
  });
};

export const postReviewsMutation = (
  options?: Partial<Options<PostReviewsData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostReviewsResponse,
    AxiosError<PostReviewsError>,
    Options<PostReviewsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postReviews({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getServiceAlignmentTypeQueryKey = (
  options: Options<GetServiceAlignmentTypeData>
) => [createQueryKey('getServiceAlignmentType', options)];

export const getServiceAlignmentTypeOptions = (
  options: Options<GetServiceAlignmentTypeData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getServiceAlignmentType({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getServiceAlignmentTypeQueryKey(options),
  });
};

export const getServiceAlignmentTypesQueryKey = (options?: Options) => [
  createQueryKey('getServiceAlignmentTypes', options),
];

export const getServiceAlignmentTypesOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getServiceAlignmentTypes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getServiceAlignmentTypesQueryKey(options),
  });
};

export const postServiceAlignmentTypesQueryKey = (
  options: Options<PostServiceAlignmentTypesData>
) => [createQueryKey('postServiceAlignmentTypes', options)];

export const postServiceAlignmentTypesOptions = (
  options: Options<PostServiceAlignmentTypesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postServiceAlignmentTypes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postServiceAlignmentTypesQueryKey(options),
  });
};

export const postServiceAlignmentTypesMutation = (
  options?: Partial<Options<PostServiceAlignmentTypesData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostServiceAlignmentTypesResponse,
    AxiosError<PostServiceAlignmentTypesError>,
    Options<PostServiceAlignmentTypesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postServiceAlignmentTypes({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putServiceAlignmentTypesMutation = (
  options?: Partial<Options<PutServiceAlignmentTypesData>>
) => {
  const mutationOptions: UseMutationOptions<
    PutServiceAlignmentTypesResponse,
    AxiosError<PutServiceAlignmentTypesError>,
    Options<PutServiceAlignmentTypesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putServiceAlignmentTypes({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteServiceAlignmentTypesMutation = (
  options?: Partial<Options<DeleteServiceAlignmentTypesData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteServiceAlignmentTypesResponse,
    AxiosError<DeleteServiceAlignmentTypesError>,
    Options<DeleteServiceAlignmentTypesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteServiceAlignmentTypes({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getServiceAlignmentTypesByNameQueryKey = (
  options: Options<GetServiceAlignmentTypesByNameData>
) => [createQueryKey('getServiceAlignmentTypesByName', options)];

export const getServiceAlignmentTypesByNameOptions = (
  options: Options<GetServiceAlignmentTypesByNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getServiceAlignmentTypesByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getServiceAlignmentTypesByNameQueryKey(options),
  });
};

export const getServiceQueryKey = (options: Options<GetServiceData>) => [
  createQueryKey('getService', options),
];

export const getServiceOptions = (options: Options<GetServiceData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getService({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getServiceQueryKey(options),
  });
};

export const putServicesByIdMutation = (
  options?: Partial<Options<PutServicesByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    PutServicesByIdResponse,
    AxiosError<PutServicesByIdError>,
    Options<PutServicesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putServicesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteServicesByIdMutation = (
  options?: Partial<Options<DeleteServicesByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteServicesByIdResponse,
    AxiosError<DeleteServicesByIdError>,
    Options<DeleteServicesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteServicesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getServicesQueryKey = (options?: Options) => [
  createQueryKey('getServices', options),
];

export const getServicesOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getServices({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getServicesQueryKey(options),
  });
};

export const postServicesQueryKey = (options: Options<PostServicesData>) => [
  createQueryKey('postServices', options),
];

export const postServicesOptions = (options: Options<PostServicesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postServices({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postServicesQueryKey(options),
  });
};

export const postServicesMutation = (
  options?: Partial<Options<PostServicesData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostServicesResponse,
    AxiosError<PostServicesError>,
    Options<PostServicesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postServices({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getUserQueryKey = (options: Options<GetUserData>) => [
  createQueryKey('getUser', options),
];

export const getUserOptions = (options: Options<GetUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getUserQueryKey(options),
  });
};

export const putUsersByIdMutation = (
  options?: Partial<Options<PutUsersByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    PutUsersByIdResponse,
    AxiosError<PutUsersByIdError>,
    Options<PutUsersByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putUsersById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteUsersByIdMutation = (
  options?: Partial<Options<DeleteUsersByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteUsersByIdResponse,
    AxiosError<DeleteUsersByIdError>,
    Options<DeleteUsersByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteUsersById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getUsersQueryKey = (options?: Options) => [
  createQueryKey('getUsers', options),
];

export const getUsersOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getUsersQueryKey(options),
  });
};

export const postUsersQueryKey = (options: Options<PostUsersData>) => [
  createQueryKey('postUsers', options),
];

export const postUsersOptions = (options: Options<PostUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postUsersQueryKey(options),
  });
};

export const postUsersMutation = (
  options?: Partial<Options<PostUsersData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostUsersResponse,
    AxiosError<PostUsersError>,
    Options<PostUsersData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postUsers({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
